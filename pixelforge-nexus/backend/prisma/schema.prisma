// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  PROJECT_LEAD
  DEVELOPER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum DocumentType {
  DESIGN_DOC
  MEETING_NOTES
  SPECIFICATION
  ASSET
  OTHER
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  UPLOAD
  DOWNLOAD
  ASSIGN
  UNASSIGN
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  passwordHash      String    @map("password_hash")
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  role              UserRole  @default(DEVELOPER)
  isActive          Boolean   @default(true) @map("is_active")
  emailVerified     Boolean   @default(false) @map("email_verified")
  lastLogin         DateTime? @map("last_login")
  failedLoginAttempts Int     @default(0) @map("failed_login_attempts")
  lockedUntil       DateTime? @map("locked_until")
  
  // MFA fields
  mfaEnabled        Boolean   @default(false) @map("mfa_enabled")
  mfaSecret         String?   @map("mfa_secret")
  mfaBackupCodes    String[]  @map("mfa_backup_codes")
  
  // Security fields
  passwordResetToken String?  @map("password_reset_token")
  passwordResetExpires DateTime? @map("password_reset_expires")
  emailVerificationToken String? @map("email_verification_token")
  
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  // Relations
  createdProjects   Project[] @relation("ProjectCreator")
  ledProjects       Project[] @relation("ProjectLead")
  assignedProjects  ProjectAssignment[]
  uploadedDocuments Document[]
  auditLogs         AuditLog[]
  sessions          UserSession[]
  
  @@map("users")
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  deadline    DateTime?
  startDate   DateTime?     @map("start_date")
  endDate     DateTime?     @map("end_date")
  
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  // Relations
  creatorId   String        @map("creator_id")
  creator     User          @relation("ProjectCreator", fields: [creatorId], references: [id])
  
  leadId      String?       @map("lead_id")
  lead        User?         @relation("ProjectLead", fields: [leadId], references: [id])
  
  assignments ProjectAssignment[]
  documents   Document[]
  auditLogs   AuditLog[]
  
  @@map("projects")
}

model ProjectAssignment {
  id          String    @id @default(uuid())
  assignedAt  DateTime  @default(now()) @map("assigned_at")
  assignedBy  String    @map("assigned_by")
  
  // Relations
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId   String    @map("project_id")
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([userId, projectId])
  @@map("project_assignments")
}

model Document {
  id          String       @id @default(uuid())
  filename    String
  originalName String      @map("original_name")
  mimeType    String       @map("mime_type")
  size        Int
  type        DocumentType @default(OTHER)
  description String?
  version     Int          @default(1)
  isActive    Boolean      @default(true) @map("is_active")
  
  // File storage
  filePath    String       @map("file_path")
  fileHash    String       @map("file_hash") // SHA-256 hash for integrity
  
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  
  // Relations
  projectId   String       @map("project_id")
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  uploadedById String      @map("uploaded_by_id")
  uploadedBy  User         @relation(fields: [uploadedById], references: [id])
  
  // Version control
  parentId    String?      @map("parent_id")
  parent      Document?    @relation("DocumentVersions", fields: [parentId], references: [id])
  versions    Document[]   @relation("DocumentVersions")
  
  @@map("documents")
}

model UserSession {
  id          String    @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  refreshToken String   @unique @map("refresh_token")
  ipAddress   String    @map("ip_address")
  userAgent   String    @map("user_agent")
  isActive    Boolean   @default(true) @map("is_active")
  expiresAt   DateTime  @map("expires_at")
  
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

model AuditLog {
  id          String      @id @default(uuid())
  action      AuditAction
  resource    String      // Table name or resource type
  resourceId  String?     @map("resource_id")
  oldValues   Json?       @map("old_values")
  newValues   Json?       @map("new_values")
  ipAddress   String      @map("ip_address")
  userAgent   String      @map("user_agent")
  success     Boolean     @default(true)
  errorMessage String?    @map("error_message")
  
  createdAt   DateTime    @default(now()) @map("created_at")
  
  // Relations
  userId      String?     @map("user_id")
  user        User?       @relation(fields: [userId], references: [id])
  
  projectId   String?     @map("project_id")
  project     Project?    @relation(fields: [projectId], references: [id])
  
  @@map("audit_logs")
}

model SecurityEvent {
  id          String    @id @default(uuid())
  eventType   String    @map("event_type")
  severity    String    @default("INFO")
  description String
  ipAddress   String    @map("ip_address")
  userAgent   String?   @map("user_agent")
  userId      String?   @map("user_id")
  metadata    Json?
  resolved    Boolean   @default(false)
  
  createdAt   DateTime  @default(now()) @map("created_at")
  resolvedAt  DateTime? @map("resolved_at")
  
  @@map("security_events")
}
